# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  app:
    container_name: doctor-octopus-dev
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      NODE_ENV: development
    ports:
      - "3000:3000"  # Client
      - "8000:8000"  # Main server
      - "8001:8001"  # FixMe server
    # command: npm run start:prod true
    develop:
      watch:
        # Rebuild on Dockerfile changes
        - action: rebuild
          path: ./Dockerfile
        # Rebuild on dependency file changes
        - action: rebuild
          path: ./server/pyproject.toml
        - action: rebuild
          path: ./client/package.json
        # Sync source code changes
        - action: sync
          path: ./utils
          target: /app/utils
        - action: sync
          path: ./server
          target: /app/server
          ignore:
            - .venv
            - __pycache__
            - "*.pyc"
        - action: sync
          path: ./client
          target: /app/client
          ignore:
            - node_modules

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

